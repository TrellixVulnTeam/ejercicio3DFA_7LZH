{"ast":null,"code":"import _asyncToGenerator from \"/home/pascuord/Documentos/uoc/masterDesarrolloAplicacionesPaginasWeb/desarrolloFrontEndAvanzado/pec2/ejercicio3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nexport let SharedService = /*#__PURE__*/(() => {\n  class SharedService {\n    constructor() {}\n\n    managementToast(element, validRequest, error) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const toastMsg = document.getElementById(element);\n\n        if (toastMsg) {\n          if (validRequest) {\n            toastMsg.className = 'show requestOk';\n            toastMsg.textContent = 'Form submitted successfully.';\n            yield _this.wait(2500);\n            toastMsg.className = toastMsg.className.replace('show', '');\n          } else {\n            toastMsg.className = 'show requestKo';\n\n            if (error === null || error === void 0 ? void 0 : error.messageDetail) {\n              toastMsg.textContent = 'Error on form submitted, show logs. Message: ' + (error === null || error === void 0 ? void 0 : error.message) + '. Message detail: ' + (error === null || error === void 0 ? void 0 : error.messageDetail) + '. Status code: ' + (error === null || error === void 0 ? void 0 : error.statusCode);\n            } else {\n              toastMsg.textContent = 'Error on form submitted, show logs. Message: ' + (error === null || error === void 0 ? void 0 : error.message) + '. Status code: ' + (error === null || error === void 0 ? void 0 : error.statusCode);\n            }\n\n            yield _this.wait(2500);\n            toastMsg.className = toastMsg.className.replace('show', '');\n          }\n        }\n      })();\n    }\n\n    errorLog(error) {\n      console.error('path:', error.path);\n      console.error('timestamp:', error.timestamp);\n      console.error('message:', error.message);\n      console.error('messageDetail:', error.messageDetail);\n      console.error('statusCode:', error.statusCode);\n    }\n\n    wait(ms) {\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          setTimeout(resolve, ms);\n        });\n      })();\n    }\n\n  }\n\n  SharedService.ɵfac = function SharedService_Factory(t) {\n    return new (t || SharedService)();\n  };\n\n  SharedService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SharedService,\n    factory: SharedService.ɵfac,\n    providedIn: 'root'\n  });\n  return SharedService;\n})();","map":null,"metadata":{},"sourceType":"module"}