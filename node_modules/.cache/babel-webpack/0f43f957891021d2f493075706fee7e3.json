{"ast":null,"code":"import _asyncToGenerator from \"/home/pascuord/Documentos/uoc/masterDesarrolloAplicacionesPaginasWeb/desarrolloFrontEndAvanzado/pec2/ejercicio3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nexport class SharedService {\n  constructor() {}\n\n  managementToast(element, validRequest, error) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const toastMsg = document.getElementById(element);\n\n      if (toastMsg) {\n        if (validRequest) {\n          toastMsg.className = 'show requestOk';\n          toastMsg.textContent = 'Form submitted successfully.';\n          yield _this.wait(2500);\n          toastMsg.className = toastMsg.className.replace('show', '');\n        } else {\n          toastMsg.className = 'show requestKo';\n\n          if (error === null || error === void 0 ? void 0 : error.messageDetail) {\n            toastMsg.textContent = 'Error on form submitted, show logs. Message: ' + (error === null || error === void 0 ? void 0 : error.message) + '. Message detail: ' + (error === null || error === void 0 ? void 0 : error.messageDetail) + '. Status code: ' + (error === null || error === void 0 ? void 0 : error.statusCode);\n          } else {\n            toastMsg.textContent = 'Error on form submitted, show logs. Message: ' + (error === null || error === void 0 ? void 0 : error.message) + '. Status code: ' + (error === null || error === void 0 ? void 0 : error.statusCode);\n          }\n\n          yield _this.wait(2500);\n          toastMsg.className = toastMsg.className.replace('show', '');\n        }\n      }\n    })();\n  }\n\n  errorLog(error) {\n    console.error('path:', error.path);\n    console.error('timestamp:', error.timestamp);\n    console.error('message:', error.message);\n    console.error('messageDetail:', error.messageDetail);\n    console.error('statusCode:', error.statusCode);\n  }\n\n  wait(ms) {\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    })();\n  }\n\n}\n\nSharedService.ɵfac = function SharedService_Factory(t) {\n  return new (t || SharedService)();\n};\n\nSharedService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SharedService,\n  factory: SharedService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/pascuord/Documentos/uoc/masterDesarrolloAplicacionesPaginasWeb/desarrolloFrontEndAvanzado/pec2/ejercicio3/src/app/Services/shared.service.ts"],"names":[],"mappings":";;AAeA,OAAM,MAAO,aAAP,CAAoB;AACxB,EAAA,WAAA,GAAA,CAAgB;;AAEV,EAAA,eAAe,CACnB,OADmB,EAEnB,YAFmB,EAGnB,KAHmB,EAGE;AAAA;;AAAA;AAErB,YAAM,QAAQ,GAAG,QAAQ,CAAC,cAAT,CAAwB,OAAxB,CAAjB;;AACA,UAAI,QAAJ,EAAc;AACZ,YAAI,YAAJ,EAAkB;AAChB,UAAA,QAAQ,CAAC,SAAT,GAAqB,gBAArB;AACA,UAAA,QAAQ,CAAC,WAAT,GAAuB,8BAAvB;AACA,gBAAM,KAAI,CAAC,IAAL,CAAU,IAAV,CAAN;AACA,UAAA,QAAQ,CAAC,SAAT,GAAqB,QAAQ,CAAC,SAAT,CAAmB,OAAnB,CAA2B,MAA3B,EAAmC,EAAnC,CAArB;AACD,SALD,MAKO;AACL,UAAA,QAAQ,CAAC,SAAT,GAAqB,gBAArB;;AACA,cAAI,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,aAAX,EAA0B;AACxB,YAAA,QAAQ,CAAC,WAAT,GACE,mDACA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,OADP,IAEA,oBAFA,IAGA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,aAHP,IAIA,iBAJA,IAKA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,UALP,CADF;AAOD,WARD,MAQO;AACL,YAAA,QAAQ,CAAC,WAAT,GACE,mDACA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,OADP,IAEA,iBAFA,IAGA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,UAHP,CADF;AAKD;;AAED,gBAAM,KAAI,CAAC,IAAL,CAAU,IAAV,CAAN;AACA,UAAA,QAAQ,CAAC,SAAT,GAAqB,QAAQ,CAAC,SAAT,CAAmB,OAAnB,CAA2B,MAA3B,EAAmC,EAAnC,CAArB;AACD;AACF;AA9BoB;AA+BtB;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAqB;AAC3B,IAAA,OAAO,CAAC,KAAR,CAAc,OAAd,EAAuB,KAAK,CAAC,IAA7B;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,YAAd,EAA4B,KAAK,CAAC,SAAlC;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,UAAd,EAA0B,KAAK,CAAC,OAAhC;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,gBAAd,EAAgC,KAAK,CAAC,aAAtC;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,aAAd,EAA6B,KAAK,CAAC,UAAnC;AACD;;AAEK,EAAA,IAAI,CAAC,EAAD,EAAW;AAAA;AACnB,aAAO,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC7B,QAAA,UAAU,CAAC,OAAD,EAAU,EAAV,CAAV;AACD,OAFM,CAAP;AADmB;AAIpB;;AAnDuB;;;mBAAb,a;AAAa,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface ResponseError {\n  statusCode: number;\n  message: string;\n  messageDetail: string;\n  code: string;\n  timestamp: string;\n  path: string;\n  method: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SharedService {\n  constructor() {}\n\n  async managementToast(\n    element: string,\n    validRequest: boolean,\n    error?: ResponseError\n  ): Promise<void> {\n    const toastMsg = document.getElementById(element);\n    if (toastMsg) {\n      if (validRequest) {\n        toastMsg.className = 'show requestOk';\n        toastMsg.textContent = 'Form submitted successfully.';\n        await this.wait(2500);\n        toastMsg.className = toastMsg.className.replace('show', '');\n      } else {\n        toastMsg.className = 'show requestKo';\n        if (error?.messageDetail) {\n          toastMsg.textContent =\n            'Error on form submitted, show logs. Message: ' +\n            error?.message +\n            '. Message detail: ' +\n            error?.messageDetail +\n            '. Status code: ' +\n            error?.statusCode;\n        } else {\n          toastMsg.textContent =\n            'Error on form submitted, show logs. Message: ' +\n            error?.message +\n            '. Status code: ' +\n            error?.statusCode;\n        }\n\n        await this.wait(2500);\n        toastMsg.className = toastMsg.className.replace('show', '');\n      }\n    }\n  }\n\n  errorLog(error: ResponseError): void {\n    console.error('path:', error.path);\n    console.error('timestamp:', error.timestamp);\n    console.error('message:', error.message);\n    console.error('messageDetail:', error.messageDetail);\n    console.error('statusCode:', error.statusCode);\n  }\n\n  async wait(ms: number) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}