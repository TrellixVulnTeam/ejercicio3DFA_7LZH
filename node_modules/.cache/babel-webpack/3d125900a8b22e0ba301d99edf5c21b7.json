{"ast":null,"code":"import _asyncToGenerator from \"/home/pascuord/Documentos/uoc/masterDesarrolloAplicacionesPaginasWeb/desarrolloFrontEndAvanzado/pec2/ejercicio3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { CategoryDTO } from 'src/app/Models/category.dto';\nlet CategoryFormComponent = class CategoryFormComponent {\n  constructor(activatedRoute, categoryService, formBuilder, router, sharedService, localStorageService) {\n    this.activatedRoute = activatedRoute;\n    this.categoryService = categoryService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.sharedService = sharedService;\n    this.localStorageService = localStorageService;\n    this.isValidForm = null;\n    this.categoryId = this.activatedRoute.snapshot.paramMap.get('id');\n    this.category = new CategoryDTO('', '', '');\n    this.isUpdateMode = false;\n    this.validRequest = false;\n    this.title = new FormControl(this.category.title, [Validators.required, Validators.maxLength(55)]);\n    this.description = new FormControl(this.category.description, [Validators.required, Validators.maxLength(255)]);\n    this.css_color = new FormControl(this.category.css_color, [Validators.required, Validators.maxLength(7)]);\n    this.categoryForm = this.formBuilder.group({\n      title: this.title,\n      description: this.description,\n      css_color: this.css_color\n    });\n  }\n\n  ngOnInit() {\n    let errorResponse; // update\n\n    if (this.categoryId) {\n      this.isUpdateMode = true;\n      /* try {\n        this.category = await this.categoryService.getCategoryById(\n          this.categoryId\n        );\n               this.title.setValue(this.category.title);\n               this.description.setValue(this.category.description);\n               this.css_color.setValue(this.category.css_color);\n               this.categoryForm = this.formBuilder.group({\n          title: this.title,\n          description: this.description,\n          css_color: this.css_color,\n        });\n      } catch (error: any) {\n        errorResponse = error.error;\n        this.sharedService.errorLog(errorResponse);\n      } */\n\n      this.categoryService.getCategoryById(this.categoryId).subscribe(categoryResult => {\n        this.category = categoryResult;\n        this.title.setValue(this.category.title);\n        this.description.setValue(this.category.description);\n        this.css_color.setValue(this.category.css_color);\n        this.categoryForm = this.formBuilder.group({\n          title: this.title,\n          description: this.description,\n          css_color: this.css_color\n        }, error => {\n          errorResponse = error.error;\n          this.sharedService.errorLog(errorResponse);\n        });\n      });\n    }\n  }\n\n  editCategory() {\n    let errorResponse;\n    let responseOK = false;\n\n    if (this.categoryId) {\n      const userId = this.localStorageService.get('user_id');\n\n      if (userId) {\n        this.category.userId = userId;\n        /* try {\n          await this.categoryService.updateCategory(\n            this.categoryId,\n            this.category\n          );\n          responseOK = true;\n        } catch (error: any) {\n          errorResponse = error.error;\n          this.sharedService.errorLog(errorResponse);\n        }\n                 await this.sharedService.managementToast(\n          'categoryFeedback',\n          responseOK,\n          errorResponse\n        );\n                 if (responseOK) {\n          // Reset the form\n          //this.registerForm.reset();\n          // After reset form we set birthDate to today again (is an example)\n          //this.birth_date.setValue(formatDate(new Date(), 'yyyy-MM-dd', 'en'));\n          this.router.navigateByUrl('categories');\n        } */\n\n        this.categoryService.updateCategory(this.categoryId, this.category).subscribe(categoryResult => {\n          responseOK = true;\n        }, error => {\n          errorResponse = error.error;\n          this.sharedService.errorLog(errorResponse);\n        }, () => {\n          this.sharedService.managementToast('categoryFeedback', responseOK, errorResponse);\n\n          if (responseOK) {\n            this.router.navigateByUrl('categories');\n          }\n        });\n      }\n    }\n\n    return responseOK;\n  }\n\n  createCategory() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let errorResponse;\n      let responseOK = false;\n\n      const userId = _this.localStorageService.get('user_id');\n\n      if (userId) {\n        _this.category.userId = userId;\n        /* try {\n          await this.categoryService.createCategory(this.category);\n          responseOK = true;\n        } catch (error: any) {\n          errorResponse = error.error;\n          this.sharedService.errorLog(errorResponse);\n        } */\n\n        _this.categoryService.createCategory(_this.category).subscribe(categoryResult => {\n          responseOK = true;\n        }, error => {\n          errorResponse = error.error;\n\n          _this.sharedService.errorLog(errorResponse);\n        }, () => {\n          _this.sharedService.managementToast('categoryFeedback', responseOK, errorResponse);\n\n          if (responseOK) {\n            _this.router.navigateByUrl('categories');\n          }\n        });\n        /* await this.sharedService.managementToast(\n          'categoryFeedback',\n          responseOK,\n          errorResponse\n        );\n               if (responseOK) {\n          // Reset the form\n          //this.registerForm.reset();\n          // After reset form we set birthDate to today again (is an example)\n          //this.birth_date.setValue(formatDate(new Date(), 'yyyy-MM-dd', 'en'));\n          this.router.navigateByUrl('categories');\n        } */\n\n      }\n\n      return responseOK;\n    })();\n  }\n\n  saveCategory() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.isValidForm = false;\n\n      if (_this2.categoryForm.invalid) {\n        return;\n      }\n\n      _this2.isValidForm = true;\n      _this2.category = _this2.categoryForm.value;\n\n      if (_this2.isUpdateMode) {\n        _this2.validRequest = yield _this2.editCategory();\n      } else {\n        _this2.validRequest = yield _this2.createCategory();\n      }\n    })();\n  }\n\n};\nCategoryFormComponent = __decorate([Component({\n  selector: 'app-category-form',\n  templateUrl: './category-form.component.html',\n  styleUrls: ['./category-form.component.scss']\n})], CategoryFormComponent);\nexport { CategoryFormComponent };","map":{"version":3,"sources":["/home/pascuord/Documentos/uoc/masterDesarrolloAplicacionesPaginasWeb/desarrolloFrontEndAvanzado/pec2/ejercicio3/src/app/Components/categories/category-form/category-form.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CategoryDTO } from 'src/app/Models/category.dto';\nimport { CategoryService } from 'src/app/Services/category.service';\nimport { LocalStorageService } from 'src/app/Services/local-storage.service';\nimport { SharedService } from 'src/app/Services/shared.service';\n\n@Component({\n  selector: 'app-category-form',\n  templateUrl: './category-form.component.html',\n  styleUrls: ['./category-form.component.scss'],\n})\nexport class CategoryFormComponent implements OnInit {\n  category: CategoryDTO;\n  title: FormControl;\n  description: FormControl;\n  css_color: FormControl;\n\n  categoryForm: FormGroup;\n  isValidForm: boolean | null;\n\n  private isUpdateMode: boolean;\n  private validRequest: boolean;\n  private categoryId: string | null;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private categoryService: CategoryService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private sharedService: SharedService,\n    private localStorageService: LocalStorageService\n  ) {\n    this.isValidForm = null;\n    this.categoryId = this.activatedRoute.snapshot.paramMap.get('id');\n    this.category = new CategoryDTO('', '', '');\n    this.isUpdateMode = false;\n    this.validRequest = false;\n\n    this.title = new FormControl(this.category.title, [\n      Validators.required,\n      Validators.maxLength(55),\n    ]);\n\n    this.description = new FormControl(this.category.description, [\n      Validators.required,\n      Validators.maxLength(255),\n    ]);\n\n    this.css_color = new FormControl(this.category.css_color, [\n      Validators.required,\n      Validators.maxLength(7),\n    ]);\n\n    this.categoryForm = this.formBuilder.group({\n      title: this.title,\n      description: this.description,\n      css_color: this.css_color,\n    });\n  }\n\n  ngOnInit() {\n    let errorResponse: any;\n\n    // update\n    if (this.categoryId) {\n      this.isUpdateMode = true;\n      /* try {\n        this.category = await this.categoryService.getCategoryById(\n          this.categoryId\n        );\n\n        this.title.setValue(this.category.title);\n\n        this.description.setValue(this.category.description);\n\n        this.css_color.setValue(this.category.css_color);\n\n        this.categoryForm = this.formBuilder.group({\n          title: this.title,\n          description: this.description,\n          css_color: this.css_color,\n        });\n      } catch (error: any) {\n        errorResponse = error.error;\n        this.sharedService.errorLog(errorResponse);\n      } */\n\n      this.categoryService\n        .getCategoryById(this.categoryId)\n        .subscribe((categoryResult) => {\n          this.category = categoryResult;\n          this.title.setValue(this.category.title);\n          this.description.setValue(this.category.description);\n          this.css_color.setValue(this.category.css_color);\n          this.categoryForm = this.formBuilder.group(\n            {\n              title: this.title,\n              description: this.description,\n              css_color: this.css_color,\n            },\n            (error: any) => {\n              errorResponse = error.error;\n              this.sharedService.errorLog(errorResponse);\n            }\n          );\n        });\n    }\n  }\n\n  private editCategory() {\n    let errorResponse: any;\n    let responseOK: boolean = false;\n    if (this.categoryId) {\n      const userId = this.localStorageService.get('user_id');\n      if (userId) {\n        this.category.userId = userId;\n        /* try {\n          await this.categoryService.updateCategory(\n            this.categoryId,\n            this.category\n          );\n          responseOK = true;\n        } catch (error: any) {\n          errorResponse = error.error;\n          this.sharedService.errorLog(errorResponse);\n        }\n\n        await this.sharedService.managementToast(\n          'categoryFeedback',\n          responseOK,\n          errorResponse\n        );\n\n        if (responseOK) {\n          // Reset the form\n          //this.registerForm.reset();\n          // After reset form we set birthDate to today again (is an example)\n          //this.birth_date.setValue(formatDate(new Date(), 'yyyy-MM-dd', 'en'));\n          this.router.navigateByUrl('categories');\n        } */\n        this.categoryService\n          .updateCategory(this.categoryId, this.category)\n          .subscribe(\n            (categoryResult) => {\n              responseOK = true;\n            },\n            (error: any) => {\n              errorResponse = error.error;\n              this.sharedService.errorLog(errorResponse);\n            },\n            () => {\n              this.sharedService.managementToast(\n                'categoryFeedback',\n                responseOK,\n                errorResponse\n              );\n              if (responseOK) {\n                this.router.navigateByUrl('categories');\n              }\n            }\n          );\n      }\n    }\n    return responseOK;\n  }\n\n  private async createCategory(): Promise<boolean> {\n    let errorResponse: any;\n    let responseOK: boolean = false;\n    const userId = this.localStorageService.get('user_id');\n    if (userId) {\n      this.category.userId = userId;\n      /* try {\n        await this.categoryService.createCategory(this.category);\n        responseOK = true;\n      } catch (error: any) {\n        errorResponse = error.error;\n        this.sharedService.errorLog(errorResponse);\n      } */\n\n      this.categoryService.createCategory(this.category).subscribe(\n        (categoryResult) => {\n          responseOK = true;\n        },\n        (error: any) => {\n          errorResponse = error.error;\n          this.sharedService.errorLog(errorResponse);\n        },\n        () => {\n          this.sharedService.managementToast(\n            'categoryFeedback',\n            responseOK,\n            errorResponse\n          );\n          if (responseOK) {\n            this.router.navigateByUrl('categories');\n          }\n        }\n      );\n\n      /* await this.sharedService.managementToast(\n        'categoryFeedback',\n        responseOK,\n        errorResponse\n      );\n\n      if (responseOK) {\n        // Reset the form\n        //this.registerForm.reset();\n        // After reset form we set birthDate to today again (is an example)\n        //this.birth_date.setValue(formatDate(new Date(), 'yyyy-MM-dd', 'en'));\n        this.router.navigateByUrl('categories');\n      } */\n    }\n\n    return responseOK;\n  }\n\n  async saveCategory() {\n    this.isValidForm = false;\n\n    if (this.categoryForm.invalid) {\n      return;\n    }\n\n    this.isValidForm = true;\n    this.category = this.categoryForm.value;\n\n    if (this.isUpdateMode) {\n      this.validRequest = await this.editCategory();\n    } else {\n      this.validRequest = await this.createCategory();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}